@model FloEvent.Web.ViewModels.MenuViewModel

<form asp-action="Create">
    <div class="form-group">
        <label asp-for="MenuName" class="control-label"></label>
        <input asp-for="MenuName" class="form-control" />
        <span asp-validation-for="MenuName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label>Food Items</label>
        <ul id="foodItemList" class="list-group">
            @foreach (var item in Model.FoodItemOptions)
            {
                var isSelected = Model.SelectedFoodItemIds.Contains(int.Parse(item.Value));
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>@item.Text</span>
                    <button type="button"
                            class="btn btn-sm @(isSelected ? "btn-danger" : "btn-success") toggle-btn"
                            data-id="@item.Value">
                        @(isSelected ? "Remove" : "Add")
                    </button>
                </li>
            }
        </ul>

        <!-- Container for hidden inputs -->
        <div id="SelectedFoodItemIdsContainer">
            @foreach (var id in Model.SelectedFoodItemIds)
            {
                <input type="hidden" name="SelectedFoodItemIds" value="@id" />
            }
        </div>

        <span asp-validation-for="SelectedFoodItemIds" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">Create Menu</button>
</form>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const container = document.getElementById("SelectedFoodItemIdsContainer");
            let selectedIds = [];

            // Initialize selectedIds from existing inputs
            container.querySelectorAll("input[name='SelectedFoodItemIds']").forEach(input => {
                selectedIds.push(parseInt(input.value));
            });

            function updateHiddenInputs() {
                container.innerHTML = "";
                selectedIds.forEach(id => {
                    const input = document.createElement("input");
                    input.type = "hidden";
                    input.name = "SelectedFoodItemIds";
                    input.value = id;
                    container.appendChild(input);
                });
            }

            document.querySelectorAll(".toggle-btn").forEach(btn => {
                btn.addEventListener("click", function () {
                    const id = parseInt(this.dataset.id);
                    const isSelected = selectedIds.includes(id);

                    if (isSelected) {
                        selectedIds = selectedIds.filter(x => x !== id);
                        this.classList.remove("btn-danger");
                        this.classList.add("btn-success");
                        this.textContent = "Add";
                    } else {
                        selectedIds.push(id);
                        this.classList.remove("btn-success");
                        this.classList.add("btn-danger");
                        this.textContent = "Remove";
                    }

                    updateHiddenInputs();
                });
            });

            updateHiddenInputs(); // Ensure inputs are up to date
        });
    </script>

    @await Html.PartialAsync("_ValidationScriptsPartial")
}
